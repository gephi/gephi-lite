{
  "appearance": {
    "color": {
      "color_all_items": "Color for all {{items}}",
      "default_value": "Color for {{items}} with no valid value",
      "enable_color_shading": "Shade {{items}} colors",
      "fixed": "A constant color",
      "ranking_intro": "Add color points on this scale",
      "scale_point": "Scale point",
      "set_color_from": "Set color from...",
      "shading_attribute": "Shade {{items}} along attribute...",
      "shading_caption_1": "The {{items}} are shaded to the color",
      "shading_caption_2": "according to their {{attribute}} values.",
      "shading_color": "Target color",
      "shading_factor": "Shading degree",
      "shading_factor_description": "Defines how much {{items}} should be shaded. Use 1 to shade all the way to the target color, or 0.1 to shade only 10% of the way, for instance.",
      "source": "Source nodes",
      "source_description": "Each edge is colored as its source.",
      "target": "Target nodes",
      "target_description": "Each edge is colored as its target.",
      "title": "Color"
    },
    "graph": {
      "background_color": "Background color",
      "layout_grid_color": "Layout evaluation grid color"
    },
    "images": {
      "default_value": "Image for {{items}} with no valid value",
      "fixed": "A constant URL",
      "fixed_label": "Same image for every {{items}}",
      "none": "No images",
      "none_description": "All {{items}} have no displayed image.",
      "set_labels_from": "Set image from...",
      "title": "Images"
    },
    "labels": {
      "adapts_to_zoom": "How much labels should grow with zoom",
      "default_value": "Label for {{items}} with no valid value",
      "density": "How many labels should appear any time",
      "ellipsis": {
        "enabled": "Shorten labels",
        "max_length": "Maximum labels length"
      },
      "fixed": "A constant text",
      "fixed_label": "Label for every {{items}}",
      "fixed_label_size": "Label size for every {{items}}",
      "fixed_size": "Fixed size",
      "none": "No label",
      "none_description": "All {{items}} have no displayed label.",
      "set_labels_from": "Set label from...",
      "set_labels_size_from": "Set label sizes from...",
      "size": "{{items}} size",
      "size_coef": "Labels sizes (higher makes labels appear bigger)"
    },
    "menu": {
      "background": "Background",
      "edges": "Edges",
      "labels": "Labels",
      "nodes": "Nodes"
    },
    "show_edges": "Show edges",
    "size": {
      "default_value": "Size for {{items}} with no valid value",
      "fixed": "A constant size",
      "interpolate": "Interpolate between custom min and max values",
      "set_size_from": "Set size from...",
      "size_all_items": "Size for all {{items}}",
      "title": "Size"
    },
    "title": "Appearance",
    "transformation_methods": {
      "linear": "linear",
      "log": "log",
      "pow-2": "pow 2",
      "pow-3": "pow 3",
      "sqrt": "sqrt",
      "title": "Transformation methods"
    },
    "zIndex": {
      "description": "Allows customizing which {{items}} should be rendered in the front.",
      "none": "Default (faster)",
      "none_description": "Gephi Lite renders all {{items}} in the order it meets them.",
      "reverse_order": "Inverse order of elements (lower values on front, higher in the back)",
      "set_values_from": "Set depth from...",
      "title": "Depth"
    }
  },
  "cloud": {
    "github": {
      "auth": {
        "asking_for_device_code": "Asking GitHub for device code",
        "copy_code": "Copy the code below, and click on \"Open GitHub\" button. It will opened a new tab, on which GitHub will ask you the code",
        "copy_success": "Code saved in clipboard",
        "title": "GitHub authentification",
        "waiting_validation": "Waiting validation"
      },
      "disconnect": {
        "action": "Disconnect",
        "message": "Are you sure you want to disconnect gephi-lite from GitHub?",
        "success": "You have been disconnected fom GitHub",
        "title": "Disconnect from GitHub?"
      }
    }
  },
  "common": {
    "add": "Add",
    "all": "All",
    "apply": "Apply",
    "cancel": "Cancel",
    "clear": "Clear",
    "close": "Close",
    "collapse": "Collapse",
    "colon": ":",
    "confirm": "Confirm",
    "copy": "Copy",
    "created": "Created",
    "delete": "Delete",
    "disabled": "Disabled",
    "download": "Download",
    "edit": "Edit",
    "enabled": "Enabled",
    "expand": "Expand",
    "filename": "Filename",
    "from": "From",
    "hide": "Hide",
    "load-more": "Load more",
    "loading": "Loading",
    "max": "Max",
    "min": "Min",
    "none": "None",
    "open": "Open",
    "open_code_editor": "Open code editor",
    "open_file": "Open {{filename}}",
    "remove": "Remove",
    "reset": "Reset",
    "save": "Save",
    "save-and-run": "Save and run",
    "select": "Select...",
    "show": "Show",
    "show_less": "Show less",
    "show_more": "Show more",
    "size": "Size",
    "start": "Start",
    "stop": "Stop",
    "submit": "Submit",
    "to": "To",
    "updated": "Updated"
  },
  "datatable": {
    "create_column": "Create column",
    "duplicate_column": "Duplicate column",
    "edges_matching": "<strong>{{count, number}}</strong> edges matching the search query",
    "edges_matching_one": "<strong>{{count, number}}</strong> edge matching the search query",
    "edges_matching_zero": "<strong>No edge</strong> matching the search query",
    "edges_not_matching": "<strong>{{count, number}}</strong> edges not matching the search query",
    "edges_not_matching_one": "<strong>{{count, number}}</strong> edge not matching the search query",
    "edges_not_matching_zero": "<strong>No edge</strong> not matching the search query",
    "insert_left": "Insert new column to the left",
    "insert_right": "Insert new column to the right",
    "modify_column": "Modify column",
    "move_left": "Move to the left",
    "move_right": "Move to the right",
    "nodes_matching": "<strong>{{count, number}}</strong> nodes matching the search query",
    "nodes_matching_one": "<strong>{{count, number}}</strong> node matching the search query",
    "nodes_matching_zero": "<strong>No node</strong> matching the search query",
    "nodes_not_matching": "<strong>{{count, number}}</strong> nodes not matching the search query",
    "nodes_not_matching_one": "<strong>{{count, number}}</strong> node not matching the search query",
    "nodes_not_matching_zero": "<strong>No node</strong> not matching the search query",
    "protected_columns": {
      "data": "Data",
      "degree": "Degree",
      "id": "ID",
      "preview": "Preview",
      "selected": "Selected?",
      "sourceId": "Source ID",
      "targetId": "Target ID"
    },
    "save_and_create_column": "Save and create column",
    "save_cell": "Save cell",
    "sort_asc": "Sort A→Z (0→9)",
    "sort_desc": "Sort Z→A (9→0)"
  },
  "edition": {
    "all_edges": "All edges",
    "all_nodes": "All nodes",
    "code_editor": "Code editor",
    "confirm_delete_attributes": "This deletion will remove {{nbValues}} values from the graph. Are you sure you want to delete the attribute {{name}}?",
    "confirm_delete_edges": "Are you sure you want to delete {{count, number}} edges?",
    "confirm_delete_edges_one": "Are you sure you want to delete this one edge?",
    "confirm_delete_nodes": "Are you sure you want to delete {{count, number}} nodes?",
    "confirm_delete_nodes_one": "Are you sure you want to delete this one node?",
    "create_edges": "Create new edge",
    "create_edges_field": "Create edges attribute",
    "create_edges_field_success": "The edge attribute has successfully been created.",
    "create_edges_scripted_field": "Create edges scripted attribute",
    "create_edges_scripted_field_success": "The scripted edge attribute has successfully been created.",
    "create_edges_success": "The edge has successfully been created.",
    "create_nodes": "Create new node",
    "create_nodes_field": "Create nodes attribute",
    "create_nodes_field_success": "The node attribute has successfully been created.",
    "create_nodes_scripted_field": "Create nodes scripted attribute",
    "create_nodes_scripted_field_success": "The scripted node attribute has successfully been created.",
    "create_nodes_success": "The node has successfully been created.",
    "data_creation": "Data creation",
    "delete_attribute": "Delete attribute",
    "delete_attributes_success": "The '{{name}}' attribute has been deleted.",
    "delete_edges": "Delete {{count, number}} edges",
    "delete_edges_attributes": "Delete the '{{name}}' edge attribute",
    "delete_edges_one": "Delete one edge",
    "delete_edges_success": "The {{count, number}} edges have successfully been deleted.",
    "delete_edges_success_one": "The edge has successfully been deleted.",
    "delete_edges_zero": "Delete edges",
    "delete_nodes": "Delete {{count, number}} nodes",
    "delete_nodes_attributes": "Delete the '{{name}}' node attribute",
    "delete_nodes_one": "Delete one node",
    "delete_nodes_success": "The {{count, number}} nodes have successfully been deleted.",
    "delete_nodes_success_one": "The node has successfully been deleted.",
    "delete_nodes_zero": "Delete nodes",
    "delete_selected_edges": "Delete selected edges",
    "delete_selected_edges_one": "Delete selected edge",
    "delete_selected_nodes": "Delete selected nodes",
    "delete_selected_nodes_one": "Delete selected node",
    "delete_this_edges": "Delete this edge",
    "delete_this_nodes": "Delete this node",
    "edit_selected_edges": "Edit selected edges",
    "edit_selected_edges_one": "Edit selected edge",
    "edit_selected_nodes": "Edit selected nodes",
    "edit_selected_nodes_one": "Edit selected node",
    "filtered_edges": "Filtered edges only",
    "filtered_nodes": "Filtered nodes only",
    "merge_selected_nodes": "Merge selected nodes",
    "multi": {
      "select_attribute": "Select the attribute to edit for the selection",
      "select_value": "Select a value to apply for the selection"
    },
    "search_nodes": "Search on node labels...",
    "selected_edges": "Selected edges only",
    "selected_nodes": "Selected nodes only",
    "update_edges": "Edit existing edge",
    "update_edges_field": "Edit edges attribute",
    "update_edges_field_success": "The edge attribute has successfully been updated.",
    "update_edges_success": "The edge has successfully been updated.",
    "update_multiple_edges": "Edit existing edges",
    "update_multiple_edges_success": "The {{count, number}} edges have successfully been updated.",
    "update_multiple_nodes": "Edit existing nodes",
    "update_multiple_nodes_success": "The {{count, number}} nodes have successfully been updated.",
    "update_nodes": "Edit existing node",
    "update_nodes_field": "Edit nodes attribute",
    "update_nodes_field_success": "The node attribute has successfully been updated.",
    "update_nodes_success": "The node has successfully been updated.",
    "update_this_edges": "Edit this edge",
    "update_this_nodes": "Edit this node"
  },
  "error": {
    "deprecated": {
      "gexf_search_params": "The `gexf=` url params to open a graph file has been renamed as `file=` in version 0.4.0. Using gexf params is deprecated  and might be removed in future version. Please use `file=` instead."
    },
    "form": {
      "field_already_exists": "The column with label \"{{label}}\" already uses the id \"{{id}}\".",
      "required": "Field is required",
      "unique": "Value must be unique, and a data with the same value already exist"
    },
    "message": "Sorry, we are working to make gephi-lite better, but bugs still happened...<br />It will help us if you can open an issue on GitHub with a description of what you were doing.",
    "not_found": {
      "paragraph": "You may have mistyped the address or the page may have moved.",
      "subtitle": "The page you were looking for doesn't exist.",
      "title": "Page Not Found"
    },
    "report": "Report error",
    "reset": "Reset everything",
    "retry": "Retry",
    "title": "Error",
    "unknown": "An unknown error has occurred."
  },
  "filters": {
    "add_filter": "Add filter",
    "create": {
      "custom_script_description": "These filters allow writing a JavaScript function that will tell for each node or edge if it should be kept.",
      "edges_attributes_description": "These filters allow filtering the edges based on their attributes. Some types of attributes are not usable as filters, in which case they are disabled.",
      "no_edges_attributes": "No edge attribute",
      "no_nodes_attributes": "No node attribute",
      "nodes_attributes_description": "These filters allow filtering the nodes based on their attributes. Some types of attributes are not usable as filters, in which case they are disabled.",
      "topological_description": "These filters allow thinning the size of the network using various topological methods.",
      "what_kind": "What kind of filter do you want to create?"
    },
    "custom_script": "Custom script",
    "desactivated": "Desactivated filter, click to reactivate",
    "disable_following": "Show the graph",
    "disable_following_subtitle": "eg. disable all filters after",
    "edges_fields": "Edges attributes",
    "full_graph": "Full graph",
    "inapplicable": "Range is only displayed when there is at least two values to filter on.",
    "insert": "Insert filter",
    "intermediate_graph": "Intermediate graph",
    "keepMissingValues": "Keep missing values",
    "nodes_fields": "Nodes attributes",
    "script": "Custom filter",
    "title": "Filters",
    "topological": "Topology",
    "topology": {
      "ego": {
        "core": "depth: maximum distance to ego",
        "direction": {
          "both": "any edges",
          "in": "inbound edges",
          "label": "Follow",
          "out": "outbound edges"
        },
        "ego": "Ego node",
        "label": "Ego network"
      },
      "kCore": {
        "core": "k: minimum degree nodes should have",
        "label": "K-Core",
        "keepSelfLoop": "Keep self-loops"
      },
      "largestConnectedComponent": {
        "label": "Connected component",
        "number": "Number of largest components to keep"
      }
    },
    "visible_graph": "Visible graph"
  },
  "gephi-lite": {
    "open_welcome_modal": "Open welcome modal",
    "report_issue": "Report an issue",
    "title": "Gephi Lite"
  },
  "graph": {
    "caption": {
      "color": "Color {{itemType}} by",
      "disabled": "Caption is available once appearance has been set.",
      "size": "Size {{itemType}} by"
    },
    "clone_in_new_tab": {
      "success": "Your graph clone has successfully been opened in a new tab."
    },
    "control": {
      "fullscreenEnter": "Enter fullscreen mode",
      "fullscreenExit": "Exit fullscreen",
      "zoomIn": "Zoom In",
      "zoomOut": "Zoom Out",
      "zoomReset": "See the whole graph"
    },
    "export": {
      "gexf": {
        "error": "GEXF export has failed",
        "success": "Your GEXF export has successfully been saved."
      },
      "png": {
        "fields": {
          "filename": "Filename",
          "height": "Height (in pixels)",
          "preserve_camera": "Preserve current camera position",
          "width": "Width (in pixels)"
        },
        "success": "Your graph PNG export has successfully been saved.",
        "title": "Export PNG snapshot"
      }
    },
    "metadata": {
      "title": "Metadata",
      "graph-title": "Title",
      "description": "Description",
      "keywords": "Keywords",
      "authors": "Authors",
      "graph-type": "Graph Type"
    },
    "model": {
      "directed_graph": "Directed graph",
      "directed": "Directed",
      "undirected": "Undirected",
      "mixed": "Mixed",
      "edges": "edges",
      "edges-data": {
        "id": "Edge ID",
        "source": "Edge source",
        "target": "Edge target"
      },
      "edges_one": "edge",
      "edges_zero": "edge",
      "field": {
        "date-format": "Date format",
        "id": "Identifier",
        "label": "Label",
        "separator": "Keywords separator",
        "type": "Type",
        "will_be_serialized_as": "{{type}} will be serialized as"
      },
      "mixed_graph": "Mixed graph",
      "nodes": "nodes",
      "nodes-data": {
        "id": "Node ID",
        "x": "Node x position",
        "y": "Node y position"
      },
      "nodes_one": "node",
      "nodes_zero": "node",
      "undirected_graph": "Undirected graph",
      "warnings": {
        "invalid_data": "The value \"{{value}}\" cannot be interpreted as a \"{{type}}\" value."
      },
      "dynamic": "dynamic",
      "selfLoop": "self-loop",
      "degree": "degree"
    },
    "open": {
      "github": {
        "error": "A technical error occurred. Please check your connectivity or try later.",
        "file-open-external": "Open {{filename}} on Gist",
        "must-be-signed": "This feature requires to be connected on GitHub",
        "no-data": "You have no GEXF, GRAPHML or Graphology JSON file saved on GitHub",
        "success": "File {{filename}} has been successfully loaded",
        "title": "Open a file from GitHub"
      },
      "local": {
        "button_text": "Select a local file",
        "dragndrop_text": "GEXF, GRAPHML or Graphology JSON are supported. You can also directly drop a file here.",
        "error": "An error occurred while opening the file. Please check that the file is a valid.",
        "success": "File {{filename}} has been successfully loaded",
        "title": "Open a local file"
      },
      "new": {
        "message": "Current graph will be cleared, are you sure you want to continue ?",
        "success": "Empty graph loaded",
        "title": "Open an empty graph"
      },
      "remote": {
        "error": "An error occurred while opening the file. Please check your connectivity and that the file is a valid.",
        "success": "File {{filename}} has been successfully loaded"
      }
    },
    "save": {
      "github": {
        "error": "An error occurred while saving your graph. Please check your connectivity or try later.",
        "field": {
          "description": "Description",
          "filename": "Filename",
          "isPublic": "Create a public Gist"
        },
        "success": "File '{{filename}}' has been successfully saved"
      },
      "local": {
        "description": "Click below to download the workspace as a JSON file",
        "error": "Failed to save the graph locally",
        "success": "Graph has been saved locally"
      },
      "title": "Save workspace as..."
    }
  },
  "layouts": {
    "circlePack": {
      "description": "Arranges the nodes as a bubble chart, according to specified attributes",
      "parameters": {
        "center": {
          "description": "Center of the layout",
          "title": "Center"
        },
        "groupingField": {
          "description": "An optional attribute to use to group the nodes",
          "title": "Hierarchy attribute"
        },
        "scale": {
          "description": "Scale of the layout",
          "title": "Scale"
        }
      },
      "title": "CirclePack"
    },
    "circular": {
      "description": "Arranges the node in a circle",
      "parameters": {
        "center": {
          "description": "Center of the layout",
          "title": "Center"
        },
        "scale": {
          "description": "Scale of the layout",
          "title": "Scale"
        }
      },
      "title": "Circular"
    },
    "description": "This panel allows computing new coordinates to nodes of the graph. ",
    "exec": {
      "started": "Layout {{layout}} is running",
      "stopped": "Layout {{layout}} has been stopped",
      "success": "Layout \"{{layout}}\" has successfully been applied."
    },
    "fa2": {
      "buttons": {
        "autoSettings": {
          "description": "Generates settings that fit the current graph the best",
          "title": "Guess settings"
        }
      },
      "parameters": {
        "adjustSizes": {
          "description": "Should the node’s sizes be taken into account?",
          "title": "Adjust sizes?"
        },
        "barnesHutOptimize": {
          "description": "Whether to use the Barnes-Hut approximation to compute repulsion in O(n*log(n)) rather than default O(n^2), n being the number of nodes",
          "title": "barnesHutOptimize"
        },
        "barnesHutTheta": {
          "description": "Barnes-Hut approximation theta parameter",
          "title": "barnesHutTheta"
        },
        "edgeWeightInfluence": {
          "description": "Influence of the edge’s weights on the layout",
          "title": "Edge weight influence"
        },
        "gravity": {
          "description": "Strength of the layout’s gravity",
          "title": "Gravity"
        },
        "linLogMode": {
          "description": "Whether to use Noack’s LinLog model.",
          "title": "linLog mode"
        },
        "outboundAttractionDistribution": {
          "title": "Out bound attraction distribution"
        },
        "scalingRatio": {
          "title": "Scaling ratio"
        },
        "slowDown": {
          "title": "Slow down?"
        },
        "strongGravityMode": {
          "title": "Strong gravity mode?"
        }
      },
      "title": "ForceAtlas2"
    },
    "force": {
      "parameters": {
        "attraction": {
          "description": "Importance of the attraction force, that attracts each pair of connected nodes like elastics",
          "title": "Attraction"
        },
        "gravity": {
          "description": "Importance of the gravity force, that attracts all nodes to the center",
          "title": "Gravity"
        },
        "inertia": {
          "description": "Percentage of a node vector displacement that is preserved at each step. 0 means no inertia, 1 means no friction",
          "title": "Inertia"
        },
        "maxMove": {
          "description": "Maximum length a node can travel at each step, in pixel",
          "title": "Maximum move"
        },
        "repulsion": {
          "description": "Importance of the repulsion force, that attracts each pair of nodes like magnets",
          "title": "Repulsion"
        }
      },
      "title": "Force directed"
    },
    "noverlap": {
      "description": "Anti-collision layout algorithm",
      "parameters": {
        "expansion": {
          "description": "Percentage of current space that nodes could attempt to move outside of",
          "title": "Expansion"
        },
        "gridSize": {
          "description": "Number of grid cells horizontally and vertically subdivising the graph’s space. This is used as an optimization scheme. Set it to 1 and you will have O(n²) time complexity, which can sometimes perform better with very few nodes.",
          "title": "Grid size"
        },
        "margin": {
          "description": "Margin to keep between nodes",
          "title": "Margin"
        },
        "ratio": {
          "description": "Ratio scaling node sizes",
          "title": "Ratio"
        },
        "speed": {
          "description": "Dampening factor that will slow down node movements to ease the overall process",
          "title": "Speed"
        }
      },
      "title": "Noverlap"
    },
    "placeholder": "Select a layout algorithm",
    "quality": {
      "caption_CMax": "of edges are shorter than Δmax thanks to the layout",
      "caption_deltaMax": "Grid size = Δmax = ",
      "description": "Are connected nodes closer thanks to the layout?",
      "enable": "Enable Connected-closeness",
      "showGrid": "Show the Δmax grid",
      "title": "Layout quality"
    },
    "random": {
      "description": "Random layout positioning every node by choosing each coordinates uniformly at random on the interval [0, 1)",
      "parameters": {
        "center": {
          "description": "Center of the layout",
          "title": "Center"
        },
        "scale": {
          "description": "Scale of the layout",
          "title": "Scale"
        }
      },
      "title": "Random"
    },
    "script": {
      "description": "Write your own layout by creating a function that returns a {x,y} object for each node",
      "parameters": {},
      "title": "Custom layout"
    },
    "title": "Layout"
  },
  "metrics": {
    "attributes_placeholder": "None",
    "compute": "Compute metrics",
    "compute_one": "Compute metric",
    "description": "This panel allows computing new attributes to the nodes or edges of the graph. These attributes can later be used in the other panels, for appearance or filtering for instance.",
    "edges": {
      "disparity": {
        "attributes": {
          "disparity": "Disparity attribute name"
        },
        "parameters": {
          "getEdgeWeight": {
            "title": "Edge weight attribute"
          }
        },
        "title": "Disparity"
      },
      "simmelianStrength": {
        "attributes": {
          "simmelianStrength": "Simmelian strength attribute name"
        },
        "title": "Simmelian strength"
      }
    },
    "edges_attribute_already_exists": "An edge attribute named \"{{field}}\" already exists. Its values will be overridden.",
    "mixed": {
      "louvainEdgeAmbiguity": {
        "attributes": {
          "ambiguityScore": "Edge ambiguity score name (the inverse of the consensus of all the Louvain runs, 0 when all Louvain runs agree, and 1 when they disagree the most)",
          "bridgeNessEdgeScore": "Edge bridge-ness attribute name (i.e. 1 - the co-membership score)",
          "coMembershipScore": "Edge co-membership attribute name (i.e. the percentage of times Louvain set the same community for both of its extremities)",
          "meanAmbiguityScore": "Node average linked edges ambiguity score attribute name",
          "sourceCommunityId": "Edge source modularity classes (for coloring purpose in the preview only)"
        },
        "description": "This algorithm helps exploring ambiguity in Louvain community detection. It runs the Louvain algorithm N times, and analyzes how consistent Louvain is along multiple runs, looking on each edge if its extremities are in the same cluster or not..",
        "parameters": {
          "getEdgeWeight": {
            "description": "An edge attribute that would represent edge weights.",
            "title": "Louvain edge weight attribute"
          },
          "resolution": {
            "description": "An increased resolution should produce more communities.",
            "title": "Louvain resolution"
          },
          "runs": {
            "description": "The number of times to run Louvain algorithm.",
            "title": "Louvain runs"
          }
        },
        "preview": "Observe ambiguity visually",
        "preview_description": "One way to represent the edges ambiguity visually, is to use the modularity classes to color edges, while highlighting in white the most ambiguous nodes and edges.",
        "preview_subtitle": "(will open a new tab)",
        "title": "Louvain edges ambiguity"
      }
    },
    "nodes": {
      "betweennessCentrality": {
        "attributes": {
          "betweennessCentrality": "Betweenness centrality attribute name"
        },
        "parameters": {
          "getEdgeWeight": {
            "title": "Edge weight attribute"
          },
          "normalize": {
            "title": "Normalize output?"
          }
        },
        "title": "Betweenness centrality"
      },
      "degree": {
        "attributes": {
          "degree": "Degree attribute name"
        },
        "parameters": {
          "getEdgeWeight": {
            "title": "Edge weight attribute"
          },
          "kind": {
            "title": "Type of degree",
            "values": {
              "degree": "Degree",
              "inDegree": "Incoming degree",
              "outDegree": "Outgoing degree"
            }
          }
        },
        "title": "Degree"
      },
      "hits": {
        "attributes": {
          "authorities": "Authority score attribute name",
          "hubs": "Hub score attribute name"
        },
        "parameters": {
          "getEdgeWeight": {
            "title": "Edge weight attribute"
          },
          "maxIterations": {
            "title": "Max iterations"
          },
          "normalize": {
            "title": "Normalize output?"
          },
          "tolerance": {
            "title": "Tolerance"
          }
        },
        "title": "HITS"
      },
      "louvain": {
        "attributes": {
          "modularityClass": "Modularity class attribute name"
        },
        "description": "This algorithm aims at splitting the nodes as densely connected groups.",
        "parameters": {
          "fastLocalMoves": {
            "description": "Whether to use a well-known optimization relying on a queue set to traverse the graph more efficiently.",
            "title": "Fast local moves"
          },
          "getEdgeWeight": {
            "description": "An edge attribute that would represent edge weights.",
            "title": "Edge weight attribute"
          },
          "randomWalk": {
            "description": "Whether to traverse the graph randomly.",
            "title": "Random walk"
          },
          "resolution": {
            "description": "An increased resolution should produce more communities.",
            "title": "Resolution"
          }
        },
        "title": "Louvain community detection"
      },
      "pagerank": {
        "attributes": {
          "pagerank": "PageRank attribute name"
        },
        "parameters": {
          "alpha": {
            "title": "Alpha"
          },
          "getEdgeWeight": {
            "title": "Edge weight attribute"
          },
          "maxIterations": {
            "title": "Max iterations"
          },
          "tolerance": {
            "title": "Tolerance"
          }
        },
        "title": "PageRank"
      }
    },
    "nodes_attribute_already_exists": "A node attribute named \"{{field}}\" already exists. Its values will be overridden.",
    "placeholder": "Select an algorithm",
    "success": "The {{items}} metrics \"{{metrics}}\" have been added to the data.",
    "success_one": "The {{items}} metric \"{{metrics}}\" has been added to the data.",
    "title": "Metrics"
  },
  "pages": {
    "data": "Data",
    "graph": "Graph"
  },
  "providers": {
    "github": "GitHub"
  },
  "search": {
    "edges": {
      "help": "Type something to find an edge",
      "no_result": "No edge found",
      "other_result": "... and {{count, number}} other edges",
      "placeholder": "Search an edge...",
      "select_all": "Select all {{count, number}} matching edges"
    },
    "graph": {
      "help": "Type something to search",
      "no_result": "No results",
      "other_result": "... and {{count, number}} other results",
      "placeholder": "Search nodes, edges",
      "select_all_edges": "Add {{count, number}} edges in the selection",
      "select_all_nodes": "Add {{count, number}} nodes in the selection"
    },
    "nodes": {
      "help": "Type something to find a node",
      "no_result": "No node found",
      "other_result": "... and {{count, number}} other nodes",
      "placeholder": "Search a node ...",
      "select_all": "Select all {{count, number}} matching nodes"
    }
  },
  "selection": {
    "cursor": "Simple selection",
    "edge_no_label": "(Empty label)",
    "edges": "<strong>{{count, number}}</strong> selected edges",
    "edges_one": "<strong>One</strong> selected edge",
    "edges_zero": "<strong>No</strong> selected edge",
    "empty_edges": "This edge has no attribute",
    "empty_nodes": "This node has no attribute",
    "focus_edges": "Select only this edge",
    "focus_nodes": "Select only this node",
    "hidden": "{{count, number}} hidden",
    "hidden_edges": "<strong>{{count, number}}</strong> hidden selected edges",
    "hidden_edges_one": "<strong>One</strong> hidden selected edge",
    "hidden_nodes": "<strong>{{count, number}}</strong> hidden selected nodes",
    "hidden_nodes_one": "<strong>One</strong> hidden selected node",
    "hidden_one": "one hidden",
    "hidden_zero": "no hidden",
    "lasso": "Lasso selection",
    "locate_on_graph": "Locate on the graph",
    "marquee": "Rectangle selection",
    "no_value": "No value",
    "node_no_label": "(Empty label)",
    "nodes": "<strong>{{count, number}}</strong> selected nodes",
    "nodes_one": "<strong>One</strong> selected node",
    "nodes_zero": "<strong>No</strong> selected node",
    "open_in_data": "Show in Data",
    "open_in_graph": "Show in Graph",
    "select_all": "Select all",
    "select_node_neighbors": "Select node's neighbors",
    "unselect_all": "Unselect all",
    "unselect_all_hidden_edges": "Unselect all hidden edges",
    "unselect_all_hidden_nodes": "Unselect all hidden edges",
    "unselect_edges": "Unselect this edge",
    "unselect_nodes": "Unselect this node",
    "visible": "{{count, number}} visible",
    "visible_edges": "<strong>{{count, number}}</strong> visible selected edges",
    "visible_edges_one": "<strong>One</strong> visible selected edge",
    "visible_edges_zero": "<strong>No</strong> visible selected edge",
    "visible_nodes": "<strong>{{count, number}}</strong> visible selected nodes",
    "visible_nodes_one": "<strong>One</strong> visible selected node",
    "visible_nodes_zero": "<strong>No</strong> visible selected node",
    "visible_one": "one visible",
    "visible_zero": "no visible"
  },
  "settings": {
    "theme": {
      "auto": "Auto",
      "dark": "Dark",
      "light": "Light"
    }
  },
  "user": {
    "avatar_alt": "{{name}}'s avatar"
  },
  "welcome": {
    "documentation": "documentation",
    "open_graph": "Open a graph file",
    "samples": "Samples",
    "title": "Welcome to Gephi Lite",
    "website": "website"
  },
  "workspace": {
    "menu": {
      "duplicate": "Duplicate in a new tab",
      "export_graph_file": "Export graph file",
      "export_image": "Export image",
      "github_signin": "Sign-in to GitHub",
      "github_signout": "Disconnect from GitHub",
      "new": "Create a new workspace",
      "open": "Open...",
      "save": "Save",
      "save_as": "Save as..."
    }
  }
}
